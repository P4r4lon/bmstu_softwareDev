[{"/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/index.js":"1","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/reportWebVitals.js":"2","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/App.js":"3","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/Home.jsx":"4","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/AnotherHome.jsx":"5","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/NavigationBarClass.jsx":"6","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/Login.jsx":"7","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/Utils/Utils.jsx":"8","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/services/BackendService.jsx":"9","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/Utils/Rdx.jsx":"10","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/SideBar.jsx":"11","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/CountryListComponent.jsx":"12","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/Alert.jsx":"13","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/CountryComponent.jsx":"14","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/MyAccountComponent.jsx":"15","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/PaginationComponent.jsx":"16"},{"size":489,"mtime":1652330335039,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1650522266000,"results":"19","hashOfConfig":"18"},{"size":2084,"mtime":1652330361630,"results":"20","hashOfConfig":"18"},{"size":293,"mtime":1652324187343,"results":"21","hashOfConfig":"18"},{"size":456,"mtime":1652324187342,"results":"22","hashOfConfig":"18"},{"size":2355,"mtime":1652330638691,"results":"23","hashOfConfig":"18"},{"size":3326,"mtime":1652324187344,"results":"24","hashOfConfig":"18"},{"size":558,"mtime":1652327981318,"results":"25","hashOfConfig":"18"},{"size":1510,"mtime":1652331863273,"results":"26","hashOfConfig":"18"},{"size":1561,"mtime":1652324187341,"results":"27","hashOfConfig":"18"},{"size":1676,"mtime":1652332125698,"results":"28","hashOfConfig":"18"},{"size":6629,"mtime":1652331292964,"results":"29","hashOfConfig":"18"},{"size":736,"mtime":1652325866543,"results":"30","hashOfConfig":"18"},{"size":3145,"mtime":1652326425120,"results":"31","hashOfConfig":"18"},{"size":4370,"mtime":1652330512165,"results":"32","hashOfConfig":"18"},{"size":4241,"mtime":1652330604166,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"11yml47",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"37"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"37"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"37"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"37"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"37"},"/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/index.js",[],[],[],"/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/reportWebVitals.js",[],[],"/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/App.js",[],[],"/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/Home.jsx",["89"],[],"import React from 'react';\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"mt-5 me-auto\">\n                <h2>RPO Art Frontend</h2>\n            </div>\n        );\n    }\n}\nexport default Home;\n","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/AnotherHome.jsx",["90"],[],"/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/NavigationBarClass.jsx",[],[],"/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/Login.jsx",[],[],"/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/Utils/Utils.jsx",[],[],"/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/services/BackendService.jsx",[],[],"/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/Utils/Rdx.jsx",["91"],[],"import { combineReducers, applyMiddleware } from \"redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport Utils from \"./Utils\";\n\n/* ACTIONS */\nconst userConstants = {\n    LOGIN: 'USER_LOGIN',\n    LOGOUT: 'USER_LOGOUT',\n};\n\nconst alertConstants = {\n    ERROR: 'ERROR',\n    CLEAR: 'CLEAR',\n};\n\n/* ACTION GENERATORS */\nexport const userActions = {\n    login,\n    logout\n};\n\nfunction login(user) {\n    Utils.saveUser(user)\n    return { type: userConstants.LOGIN, user }\n}\n\nfunction logout() {\n    Utils.removeUser()\n    return { type: userConstants.LOGOUT }\n}\n\nexport const alertActions = {\n    error,\n    clear\n}\n\nfunction error(msg) {\n    return { type: alertConstants.ERROR, msg }\n}\n\nfunction clear() {\n    return { type: alertConstants.CLEAR }\n}\n\n/* REDUCERS */\nlet user = Utils.getUser()\nconst initialState = user ? { user } : {}\nfunction authentication(state = initialState, action) {\n    console.log(\"authentication\")\n    switch (action.type) {\n        case userConstants.LOGIN:\n            return { user: action.user };\n        case userConstants.LOGOUT:\n            return {};\n        default:\n            return state\n    }\n}\n\n\nfunction alert(state = {}, action) {\n    console.log(\"alert\")\n    switch (action.type) {\n        case alertConstants.ERROR:\n            return { msg: action.msg };\n        case alertConstants.CLEAR:\n            return {};\n        default:\n            return state\n    }\n}\n\n/* STORE */\n\nconst rootReducer = combineReducers({\n    authentication, alert\n});\n\nexport const store = configureStore({ reducer: rootReducer });","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/SideBar.jsx",[],[],"/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/CountryListComponent.jsx",["92","93"],[],"import React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash, faEdit, faPlus } from '@fortawesome/free-solid-svg-icons'\nimport Alert from './Alert'\nimport BackendService from \"../services/BackendService\";\nimport { useNavigate } from 'react-router-dom';\nimport PaginationComponent from \"./PaginationComponent\";\n\nconst CountryListComponent = props => {\n    const [message, setMessage] = useState();\n    const [countries, setCountries] = useState([]);\n    const [selectedCountries, setSelectedCountries] = useState([]);\n    const [show_alert, setShowAlert] = useState(false);\n    const [checkedItems, setCheckedItems] = useState([]);\n    const [hidden, setHidden] = useState(false);\n    const [page, setPage] = useState(0);\n    const [totalCount, setTotalCount] = useState(0);\n    const limit = 2;\n    const navigate = useNavigate();\n    const onPageChanged = cp => {\n        refreshCountries(cp - 1)\n    }\n\n    const setChecked = v => {\n        setCheckedItems(Array(countries.length).fill(v));\n    }\n\n    const handleCheckChange = e => {\n        const idx = e.target.name;\n        const isChecked = e.target.checked;\n        let checkedCopy = [...checkedItems];\n        checkedCopy[idx] = isChecked;\n        setCheckedItems(checkedCopy);\n    }\n\n    const handleGroupCheckChange = e => {\n        const isChecked = e.target.checked;\n        setChecked(isChecked);\n    }\n    const deleteCountriesClicked = () => {\n        let x = [];\n        countries.map((t, idx) => {\n            if (checkedItems[idx]) {\n                x.push(t)\n            }\n            return 0\n        });\n        if (x.length > 0) {\n            var msg;\n            if (x.length > 1) {\n                msg = \"Пожалуйста подтвердите удаление \" + x.length + \" стран\";\n            } else {\n                msg = \"Пожалуйста подтвердите удаление страны \" + x[0].name;\n            }\n            setShowAlert(true);\n            setSelectedCountries(x);\n            setMessage(msg);\n        }\n    }\n\n    const refreshCountries = cp => {\n        BackendService.retrieveAllCountries(cp, limit)\n            .then(\n                resp => {\n                    setCountries(resp.data.content);\n                    setHidden(false);\n                    setTotalCount(resp.data.totalElements);\n                    setPage(cp);\n                })\n            .catch(() => {\n                setHidden(true);\n                setTotalCount(0);\n            })\n            .finally(() => setChecked(false))\n    }\n\n    useEffect(() => {\n        refreshCountries();\n    }, [])\n\n    const updateCountryClicked = id => {\n        navigate(`/countries/${id}`)\n    }\n\n    const onDelete = () => {\n        BackendService.deleteCountries(selectedCountries)\n            .then(() => refreshCountries())\n            .catch(() => { })\n    }\n\n    const closeAlert = () => {\n        setShowAlert(false)\n    }\n\n    const addCountryClicked = () => {\n        navigate(`/countries/-1`)\n    }\n\n    if (hidden)\n        return null;\n\n    return (\n        <div className=\"m-4\">\n            <div className=\"row my-2\">\n                <h3>Страны</h3>\n                <PaginationComponent\n                    totalRecords={totalCount}\n                    pageLimit={limit}\n                    pageNeighbours={1}\n                    onPageChanged={onPageChanged} />\n                <div className=\"btn-toolbar\">\n                    <div className=\"btn-group ms-auto\">\n                        <button className=\"btn btn-outline-secondary\"\n                                onClick={addCountryClicked}>\n                            <FontAwesomeIcon icon={faPlus} />{' '}Добавить\n                        </button>\n                    </div>\n                    <div className=\"btn-group ms-2\">\n                        <button className=\"btn btn-outline-secondary\"\n                                onClick={deleteCountriesClicked}>\n                            <FontAwesomeIcon icon={faTrash} />{' '}Удалить\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"row my-2 me-0\">\n                <table className=\"table table-sm\">\n                    <thead className=\"thead-light\">\n                    <tr>\n                        <th>Название</th>\n                        <th>\n                            <div className=\"btn-toolbar pb-1\">\n                                <div className=\"btn-group ms-auto\">\n                                    <input type=\"checkbox\" onChange={handleGroupCheckChange} />\n                                </div>\n                            </div>\n                        </th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        countries && countries.map((country, index) =>\n                            <tr key={country.id}>\n                                <td>{country.name}</td>\n                                <td>\n                                    <div className=\"btn-toolbar\">\n                                        <div className=\"btn-group ms-auto\">\n                                            <button className=\"btn btn-outline-secondary btn-sm btn-toolbar\"\n                                                    onClick={() =>\n                                                        updateCountryClicked(country.id)}>\n                                                <FontAwesomeIcon icon={faEdit} fixedWidth />\n                                            </button>\n                                        </div>\n                                        <div className=\"btn-group ms-2 mt-1\">\n                                            <input type=\"checkbox\" name={index}\n                                                   checked={checkedItems.length > index ? checkedItems[index] : false}\n                                                   onChange={handleCheckChange} />\n                                        </div>\n                                    </div>\n                                </td>\n                            </tr>\n                        )\n                    }\n                    </tbody>\n                </table>\n            </div>\n            <Alert title=\"Удаление\"\n                   message={message}\n                   ok={onDelete}\n                   close={closeAlert}\n                   modal={show_alert}\n                   cancelButton={true} />\n        </div>\n    )\n}\n\nexport default CountryListComponent;","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/Alert.jsx",[],[],"/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/CountryComponent.jsx",["94","95","96"],[],"import React, { Component, useEffect, useState } from 'react';\nimport BackendService from '../services/BackendService';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronLeft, faSave } from '@fortawesome/free-solid-svg-icons';\nimport { alertActions } from \"../Utils/Rdx\";\nimport { connect } from \"react-redux\";\nimport { Form } from \"react-bootstrap\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nconst CountryComponent = props => {\n    const params = useParams();\n    const [id, setId] = useState(params.id);\n    const [name, setName] = useState(\"\");\n    const [hidden, setHidden] = useState(false);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (parseInt(id) !== -1) {\n            BackendService.retrieveCountry(id)\n                .then((resp) => {\n                    setName(resp.data.name)\n                })\n                .catch(() => setHidden(true))\n        }\n    }, []); // [] нужны для вызова useEffect только один раз при инициализации компонента\n    // это нужно для того, чтобы в состояние name каждый раз не записывалось значение из БД\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        let err = null;\n        if (!name) err = \"Название страны должно быть указано\";\n        if (err) props.dispatch(alertActions.error(err));\n        let country = { id, name };\n\n        if (parseInt(country.id) === -1) {\n            BackendService.createCountry(country)\n                .then(() => navigate(`/countries`))\n                .catch(() => {\n                })\n        } else {\n            BackendService.updateCountry(country)\n                .then(() => navigate(`/countries`))\n                .catch(() => {\n                })\n        }\n    }\n\n    if (hidden)\n        return null;\n    return (\n        <div className=\"m-4\">\n            <div className=\" row my-2 mr-0\">\n                <h3>Страна</h3>\n                <button className=\"btn btn-outline-secondary ml-auto\"\n                        onClick={() => navigate(`/countries`)}\n                ><FontAwesomeIcon icon={faChevronLeft} />{' '}Назад</button>\n            </div>\n            <Form onSubmit={onSubmit}>\n                <Form.Group>\n                    <Form.Label>Название</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Введите название страны\"\n                        onChange={(e) => { setName(e.target.value) }}\n                        value={name}\n                        name=\"name\"\n                        autoComplete=\"off\"\n                    />\n                </Form.Group>\n                <button className=\"btn btn-outline-secondary\" type=\"submit\">\n                    <FontAwesomeIcon icon={faSave} />{' '}\n                    Сохранить\n                </button>\n            </Form>\n        </div>\n    )\n}\n\nexport default connect()(CountryComponent);","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/MyAccountComponent.jsx",["97"],[],"import React, { useEffect, useState } from 'react';\nimport BackendService from '../services/BackendService';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { alertActions } from \"../Utils/Rdx\";\nimport Utils from \"../Utils/Utils\";\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst MyAccountComponent = props => {\n    const navigate = useNavigate();\n    const dispatch = useDispatch()\n    const { register, handleSubmit, setValue: mySetValue } = useForm();\n    const [show_pwd, setShowPwd] = useState(false);\n    const uid = Utils.getUser().id;\n    const onSubmit = data => {\n        console.log(data);\n        let user = {\n            id: uid,\n            login: data.login,\n            email: data.email,\n            password: data.pwd,\n            np: data.pwd2\n        }\n        if (validate(data)) {\n            BackendService.updateUser(user)\n                .then(() => {\n                    navigate(\"users/\");\n                })\n                .catch(() => {\n                })\n        }\n    }\n\n    useEffect(() => {\n        BackendService.retrieveUser(uid)\n            .then(response => {\n                mySetValue(\"login\", response.data.login);\n                mySetValue(\"email\", response.data.email);\n            })\n            .catch(() => {\n            })\n    }, []);\n\n    const onSetPasswordClick = () => {\n        setShowPwd(true);\n    }\n\n    const validate = values => {\n        let e = null\n        if (values.pwd) {\n            if (values.pwd2.length < 8)\n                e = 'Длина пароля должна быть не меньше 8 символов'\n            else if (!values.pwd2)\n                e = 'Пожалуйста повторите ввод пароля'\n            else if (values.pwd !== values.pwd2)\n                e = 'Пароли не совпадают'\n        }\n        if (e != null) {\n            dispatch(alertActions.error(e))\n            return false;\n        }\n        return true;\n    }\n\n    return (\n        <div>\n            <div className=\"container\">\n                <div className=\"row my-2 ms-0\">\n                    <h3>Мой аккаунт</h3>\n                    <div>\n                        <button className=\"btn btn-outline-secondary float-end\"\n                                onClick={() => navigate.goBack()}>\n                            <FontAwesomeIcon icon={faChevronLeft} />{' '}Назад\n                        </button>\n                    </div>\n                </div>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <fieldset className=\"form-group mt-2\">\n                        <label>Логин</label>\n                        <input {...register(\"login\")} className=\"form-control\" type=\"text\" disabled />\n                    </fieldset>\n                    <fieldset className=\"form-group mt-2\" >\n                        <label>EMail</label>\n                        <input {...register(\"email\")} className=\"form-control\" type=\"text\" />\n                    </fieldset>\n                    {show_pwd &&\n                    <fieldset className=\"form-group mt-2\">\n                        <label>Введите пароль</label>\n                        <input className=\"form-control\" type=\"password\" {...register(\"pwd\")} />\n                    </fieldset>\n                    }\n                    {show_pwd &&\n                    <fieldset className=\"form-group-mt-2\">\n                        <label>Повторите пароль</label>\n                        <input className=\"form-control\" type=\"password\" {...register(\"pwd2\", { minLength: 8 })} />\n                    </fieldset>\n                    }\n                    {!show_pwd && <div>\n                        <button className=\"btn btn-outline-secondary mt-2\"\n                                onClick={onSetPasswordClick}>\n                            Изменить пароль\n                        </button>\n                    </div>\n                    }\n                    <input type=\"submit\" className=\"btn btn-outline-secondary mt-2\" value={\"Сохранить\"} />\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default connect()(MyAccountComponent);","/Users/david/Desktop/sshBMSTU/bmstu_softwareDev/backend/front/src/components/PaginationComponent.jsx",["98"],[],"import React, { Fragment, useEffect, useState } from 'react';\n\nconst LEFT_PAGE = 'LEFT';\nconst RIGHT_PAGE = 'RIGHT';\n\nconst PaginationComponent = props => {\n    const totalRecords = props.totalRecords;\n    const pageNeighbours = props.pageNeighbours;\n    const [currentPage, setCurrentPage] = useState(props.currentPage);\n    const totalPages = Math.ceil(props.totalRecords / props.pageLimit);\n\n    const range = (from, to, step = 1) => {\n        let i = from;\n        const range = [];\n        while (i <= to) {\n            range.push(i);\n            i += step;\n        }\n        return range;\n    }\n\n    const fetchPageNumbers = () => {\n        const totalNumbers = (pageNeighbours * 2) + 3;\n        const totalBlocks = totalNumbers + 2;\n        if (totalPages > totalBlocks) {\n            const startPage = Math.max(2, currentPage - pageNeighbours);\n            const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\n            let pages = range(startPage, endPage);\n            const hasLeftSpill = startPage > 2;\n            const hasRightSpill = (totalPages - endPage) > 1;\n            const spillOffset = totalNumbers - (pages.length + 1);\n            switch (true) {\n                case (hasLeftSpill && !hasRightSpill): {\n                    let extraPages = range(startPage - spillOffset, startPage - 1);\n                    pages = [LEFT_PAGE, ...extraPages, ...pages];\n                    break;\n                }\n                case (!hasLeftSpill && hasRightSpill): {\n                    let extraPages = range(endPage + 1, endPage + spillOffset);\n                    pages = [...pages, ...extraPages, RIGHT_PAGE];\n                    break;\n                }\n                case (hasLeftSpill && hasRightSpill):\n                default: {\n                    pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\n                    break;\n                }\n            }\n            return [1, ...pages, totalPages];\n        }\n        return range(1, totalPages);\n    }\n\n    useEffect(() => {\n        gotoPage(1);\n    }, [])\n    const gotoPage = page => {\n        const { onPageChanged = f => f } = props;\n        onPageChanged(page);\n        setCurrentPage(page)\n    }\n    const handleClick = page => evt => {\n        evt.preventDefault();\n        gotoPage(page);\n    }\n    const handleMoveLeft = e => {\n        e.preventDefault();\n        gotoPage(currentPage - (pageNeighbours * 2) - 1);\n    }\n    const handleMoveRight = e => {\n        e.preventDefault();\n        gotoPage(currentPage + (pageNeighbours * 2) + 1);\n    }\n    if (!totalRecords || totalPages === 1) return null;\n    const pages = fetchPageNumbers(totalPages);\n\n    return (\n        <Fragment>\n            <nav aria-label=\"Pagination\">\n                <ul className=\"pagination\">\n                    {pages.map((page, index) => {\n                        if (page === LEFT_PAGE) return (\n                            <li key={index} className=\"page-item\">\n                                <button className=\"page-link\" aria-label=\"Previous\" onClick={handleMoveLeft}>\n                                    <span aria-hidden=\"true\">«</span>\n                                    <span className=\"sr-only\">Предыдущая</span>\n                                </button>\n                            </li>\n                        );\n                        if (page === RIGHT_PAGE) return (\n                            <li key={index} className=\"page-item\">\n                                <button className=\"page-link\" aria-label=\"Next\" onClick={handleMoveRight}>\n                                    <span aria-hidden=\"true\">»</span>\n                                    <span className=\"sr-only\">Следующая</span>\n                                </button>\n                            </li>\n                        );\n                        return (\n                            <li key={index} className={`page-item${currentPage === page ? ' active' : ''}`}>\n                                <button className=\"page-link\" onClick={handleClick(page)}>{page}</button>\n                            </li>\n                        );\n                    })}\n                </ul> </nav>\n        </Fragment>\n    );\n}\nexport default PaginationComponent;",{"ruleId":"99","severity":1,"message":"100","line":3,"column":5,"nodeType":"101","messageId":"102","endLine":5,"endColumn":6},{"ruleId":"99","severity":1,"message":"100","line":4,"column":5,"nodeType":"101","messageId":"102","endLine":6,"endColumn":6},{"ruleId":"103","severity":1,"message":"104","line":1,"column":27,"nodeType":"105","messageId":"106","endLine":1,"endColumn":42},{"ruleId":"103","severity":1,"message":"107","line":16,"column":12,"nodeType":"105","messageId":"106","endLine":16,"endColumn":16},{"ruleId":"108","severity":1,"message":"109","line":79,"column":8,"nodeType":"110","endLine":79,"endColumn":10,"suggestions":"111"},{"ruleId":"103","severity":1,"message":"112","line":1,"column":17,"nodeType":"105","messageId":"106","endLine":1,"endColumn":26},{"ruleId":"103","severity":1,"message":"113","line":12,"column":16,"nodeType":"105","messageId":"106","endLine":12,"endColumn":21},{"ruleId":"108","severity":1,"message":"114","line":25,"column":8,"nodeType":"110","endLine":25,"endColumn":10,"suggestions":"115"},{"ruleId":"108","severity":1,"message":"116","line":44,"column":8,"nodeType":"110","endLine":44,"endColumn":10,"suggestions":"117"},{"ruleId":"108","severity":1,"message":"118","line":56,"column":8,"nodeType":"110","endLine":56,"endColumn":10,"suggestions":"119"},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'applyMiddleware' is defined but never used.","Identifier","unusedVar","'page' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshCountries'. Either include it or remove the dependency array.","ArrayExpression",["120"],"'Component' is defined but never used.","'setId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["121"],"React Hook useEffect has missing dependencies: 'mySetValue' and 'uid'. Either include them or remove the dependency array.",["122"],"React Hook useEffect has a missing dependency: 'gotoPage'. Either include it or remove the dependency array.",["123"],{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},"Update the dependencies array to be: [refreshCountries]",{"range":"132","text":"133"},"Update the dependencies array to be: [id]",{"range":"134","text":"135"},"Update the dependencies array to be: [mySetValue, uid]",{"range":"136","text":"137"},"Update the dependencies array to be: [gotoPage]",{"range":"138","text":"139"},[2596,2598],"[refreshCountries]",[950,952],"[id]",[1471,1473],"[mySetValue, uid]",[2047,2049],"[gotoPage]"]